"use strict";

!function() {
    angular.module("ate.common", [ "gettext", "ngResource", "ngRoute", "ui.bootstrap", "ngCookies" ]);
}(), function() {
    function a(a, b, c, d, e, f, g) {
        var h = this;
        h.username = "", h.password = "", h.error = "", h.debug = "", h.next = "", h.afterLogin = function() {
            d.path("/");
        }, h.login = function() {
            var a = {
                username: h.username,
                password: h.password
            };
            c.post("/accounts/api/login", a).success(function(a) {
                console.log(a), 0 == a.status ? (h.error = "", h.debug = "", g.setPermissions(a.permission), 
                g.setUsername(h.username), console.log("login success"), d.path("/home")) : (h.error = "Server Error - please contact a technician", 
                h.debug = a.debug, h.username = "", h.password = "", console.log("login fail"));
            }).error(function(a) {
                h.error = "Server Error - please contact a technician", h.debug = a;
            });
        }, h.logout = function() {
            console.log("logout");
            var a = {};
            c.put("/accounts/api/login", a).success(function(a) {
                console.log(a), 0 == a.status ? (b.remove("myFavorite"), d.path("/login")) : console.log(a);
            }).error(function(a) {
                console.log(a);
            });
        }, h.isLoggedIn = function() {
            return g.isLoggedIn();
        };
    }
    angular.module("ate.common").controller("LoginController", [ "$scope", "$cookieStore", "$http", "$location", "$cookies", "$timeout", "AuthService", a ]);
}(), function() {
    function a(a, b, c) {
        var d = this;
        return d.permissions = [], d.username = "", d.resolveLocation = function(a) {
            if (!a) return !0;
            if (d.isLoggedIn()) {
                if (d.hasPermission(a)) return !0;
                c.path("/no_permission");
            } else c.path("/login");
        }, d.requireLogin = function() {
            return d.isLoggedIn() ? !0 : (console.log("requireLogin : Loggin is false"), void c.path("/login"));
        }, d.isLoggedIn = function() {
            return d.username ? !0 : b.ate_user ? !0 : !1;
        }, d.getUsername = function() {
            return b.ate_user;
        }, d.hasPermission = function(a) {
            return d.permissions.indexOf(a) >= 0 ? !0 : !1;
        }, d.setPermissions = function(a) {
            d.permissions = angular.copy(a);
        }, d.setUsername = function(a) {
            d.username = a;
        }, d.setLoggedIn = function() {}, d.logout = function(b) {
            b || (b = "/login");
            var e = {};
            a.put("/accounts/api/login", e).success(function(a) {
                d.username = "", d.permissions = [], d.username = "", console.log(a), 0 == a.status ? c.path(b) : console.log(a);
            }).error(function(a) {
                d.username = "", console.log(a);
            });
        }, d.getPermissions = function(b) {
            a.get("/accounts/api/login?_id=" + b).success(function(a) {
                0 == a.status ? (console.log(a), d.permissions = a.data) : d.error = a.data;
            });
        }, d;
    }
    angular.module("ate.common").service("AuthService", [ "$http", "$cookies", "$location", a ]);
}(), function() {
    function a(a) {
        var b = {
            WebSocketStatus: {
                status: a.status,
                info: "",
                wsEvent: ""
            },
            serverStatuses: {
                rabbitmq: {
                    status: "offline",
                    info: "",
                    name: "rabbitmq"
                },
                mongodb: {
                    status: "offline",
                    info: "",
                    name: "mongodb"
                },
                mongodb_replica_set: {
                    status: "offline",
                    info: ""
                },
                celery: {
                    status: "offline",
                    info: "",
                    name: "celery"
                },
                logger: {
                    status: "offline",
                    info: "",
                    name: "logger"
                },
                redis: {
                    status: "offline",
                    info: "",
                    name: "redis"
                }
            }
        };
        return b.canRunTse = function() {
            return "offline" == b.WebSocketStatusstatus.status ? !1 : "offline" == b.serverStatuses.celery.status ? !1 : "offline" == b.serverStatuses.mongodb.status ? !1 : "offline" == b.serverStatuses.rabbitmq.status ? !1 : !0;
        }, b.serverStatusCallback = function(a) {
            b.serverStatuses = a.data;
        }, b.onOpenWs = function() {
            b.WebSocketStatus.status = "online", b.WebSocketStatus.wsEvent = "";
        }, b.onCloseWs = function(a) {
            b.WebSocketStatus.status = "offline", b.WebSocketStatus.wsEvent = a;
        }, a.setOpenCallback(b.onOpenWs), a.setCloseCallback(b.onCloseWs), a.setCallback("server_alert", b.serverStatusCallback), 
        b;
    }
    angular.module("ate.common").service("AlertService", [ "WsClient", a ]);
}(), function() {
    function a() {
        var a = {
            celery_queues: [ "default", "deployment", "debug", "custom1" ],
            workers: [ {
                host: "ate-tst-1",
                queues: [ "default" ]
            }, {
                host: "ate-tst-2",
                queues: [ "default" ]
            }, {
                host: "ate-tst-3",
                queues: [ "deployment" ]
            }, {
                host: "ate-tst-4",
                queues: [ "debug" ]
            }, {
                host: "ate-tst-5",
                queues: [ "custom1", "debug" ]
            } ]
        };
        return a.getQueues = function() {
            return a.celery_queues;
        }, a.addQueue = function(b) {
            a.celery_queues.push(b);
        }, a.addWorkerQueue = function(a, b) {
            a.queues.indexOf(b) < 0 && a.queues.push(b);
        }, a.removeWorkerQueue = function(a, b) {
            a.queues.splice(a.queues.indexOf(b), 1);
        }, a.getWorkersList = function() {
            return a.workers;
        }, a;
    }
    angular.module("ate.common").service("CeleryControlService", [ a ]);
}(), function() {
    function a() {
        var a = {
            entities: []
        };
        return a.addEntity = function() {}, a.reportError = function() {}, a.getEntityError = function() {}, 
        a.getError = function() {}, a.getErrors = function() {}, a;
    }
    angular.module("ate.common").service("ErrorHandlingService", [ a ]);
}(), function() {
    function a(a, b) {
        var c = {
            uiLanguage: "en",
            languages: [ {
                _id: "en",
                name: "English",
                "native": "English"
            }, {
                _id: "he",
                name: "Hebrew",
                "native": "Hebrew"
            }, {
                _id: "ru",
                name: "Russian",
                "native": "Russian"
            } ]
        };
        return c.setUiLanguage = function(d) {
            c.uiLanguage = d, a.setCurrentLanguage(d), b.setUiLanguage(d);
        }, c.getLanguages = function() {
            return c.languages;
        }, c.getuiLanguage = function() {
            return console.log("service.uiLanguage = " + c.uiLanguage), c.uiLanguage;
        }, c;
    }
    angular.module("ate.common").service("LanguageService", [ "gettextCatalog", "ProfileService", a ]);
}(), function() {
    function a(a, b) {
        var c = {};
        return c.loadOperationLog = function(c, d, e) {
            a.get("/admin/api/operation_log?start=" + d + "&cnt=" + e).success(function(a) {
                0 == a.status ? (console.log(a), c.operationLogs = a.data) : (c.error = a.error, 
                b.error("OperationLogService failed to load logs:" + a.debug, "oplog", a));
            }).error(function(a) {
                b.error("http call failed", "oplog", a), c.error = a;
            });
        }, c.loadAdminOperationLog = function(c, d, e) {
            a.get("/admin/api/operation_log?admin=1&start=" + d + "&cnt=" + e).success(function(a) {
                0 == a.status ? (console.log(a), c.adminOperationLogs = a.data) : (c.error = a.error, 
                b.error("OperationLogService failed to load logs:" + a.debug, "oplog", a));
            }).error(function(a) {
                b.error("http call failed", "oplog", a), c.error = a;
            });
        }, c.createOperationLog = function(c, d, e, f) {
            log = {
                entity: d,
                action: c,
                comments: f,
                status: e
            }, a.post("admin/api/operation_log", log).success(function(a) {
                0 == a.status ? container.operationLogs = a.data : (container.error = a.error, b.error("OperationLogService failed to create log:" + a.debug, "oplog", log));
            }).error(function(a) {
                b.error(a, "oplog", log), container.error = a.error;
            });
        }, c;
    }
    angular.module("ate.common").service("OperationLogService", [ "$http", "LoggerService", a ]);
}(), function() {
    function a(a, b) {
        var c = {
            profile: {
                language: "en",
                theme: "cerulean"
            }
        };
        return c.setDefaults = function() {
            c.profile.language || (c.profile.language = "en"), c.profile.theme || (c.profile.theme = "cerulean");
        }, c.applyProfile = function() {
            b.setCurrentLanguage(c.profile.language);
        }, c.loadProfile = function(b) {
            a.get("/tester/api/profile?userid=" + b).success(function(a) {
                0 == a.status ? (c.profile = a.data, c.setDefaults(), c.applyProfile()) : console.log(a);
            });
        }, c.saveProfile = function() {
            a.put("/tester/api/profile", c.profile).success(function(a) {
                console.log(0 == a.status ? "update profile success" : a);
            });
        }, c.setUiLanguage = function(a) {
            c.profile.language = a, c.saveProfile();
        }, c.getUiLanguage = function() {
            return c.profile.language;
        }, c.setTheme = function(a) {
            c.profile.theme = a, c.saveProfile();
        }, c.getTheme = function() {
            return c.profile.theme;
        }, c;
    }
    angular.module("ate.common").service("ProfileService", [ "$http", "gettextCatalog", a ]);
}(), function() {
    function a(a, b) {
        var c = {
            themes: [ "cerulean", "cosmo", "cyborg", "darkly", "flatly", "journal", "lumen", "paper", "readable", "sandstone", "simplex", "slate", "spacelab", "superhero", "united", "yeti" ]
        };
        return a.theme = "cerulean", c.setTheme = function(c) {
            b.setTheme(c), a.theme = c;
        }, c.getThemes = function() {
            return c.themes;
        }, c.getTheme = function() {
            b.getTheme();
        }, c;
    }
    angular.module("ate.common").service("ThemeService", [ "$rootScope", "ProfileService", a ]);
}(), function() {
    function a() {
        var a = {
            callbacks: [],
            openCallbacks: [],
            closeCallbacks: [],
            waitingMessages: []
        };
        a.setCallback = function(a, b) {
            console.log("setCallback for " + a), this.callbacks[a] = b;
        }, a.setCloseCallback = function(a) {
            console.log("setCloseCallback "), this.closeCallbacks.push(a);
        }, a.setOpenCallback = function(a) {
            console.log("setOpenCallback"), this.openCallbacks.push(a);
        }, console.log("web_socket_url:" + web_socket_url);
        var b = new SockJS(web_socket_url);
        return b.onopen = function() {
            console.log("Open websocket with protocol " + b.protocol), a.status = "Open", console.log(a.waitingMessages);
            for (var c = 0; c < a.waitingMessages.length; c++) a.sendMessage(a.waitingMessages[c]);
            for (var c = 0; c < a.openCallbacks.length; c++) a.openCallbacks[c]();
        }, b.onmessage = function(b) {
            var c = JSON.parse(b.data);
            a.callbacks[c.msg_type] && a.callbacks[c.msg_type](c);
        }, b.onclose = function(b) {
            var c = new Date();
            console.log(c.getTime()), a.status = "Closed", console.log(b), console.log("web socket has been closed");
            for (var d = 0; d < a.closeCallbacks.length; d++) console.log("calling closeCallbacks :" + d), 
            a.closeCallbacks[d](b);
        }, b.onerror = function(b) {
            a.status = "Error", console.log(b);
        }, a.addFilters = function(b) {
            var c = {
                type: "add_entity_filters",
                filters: b
            };
            console.log("adding filters" + angular.toJson(c)), a.sendMessage(c);
        }, a.removeFilters = function(b) {
            var c = {
                type: "remove_entity_filters",
                filters: b
            };
            a.sendMessage(c);
        }, a.clearFilters = function() {
            var b = {
                type: "clear_filters"
            };
            a.sendMessage(b);
        }, a.sendMessage = function(c) {
            if ("Open" != a.status) return console.log("I try to write " + angular.toJson(c) + " , but web socket is closed"), 
            a.waitingMessages.push(c), !1;
            try {
                b.send(angular.toJson(c));
            } catch (d) {
                console.log(d), console.log(b);
            }
        }, a;
    }
    angular.module("ate.common").service("WsClient", [ "$timeout", a ]);
}();